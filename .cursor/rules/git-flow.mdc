# üåø **REGLAS DE GIT FLOW EN PRODUCCI√ìN**

## **‚ö†Ô∏è CONTEXTO CR√çTICO**

- **Aplicaci√≥n en PRODUCCI√ìN con usuarios reales**
- **Cada funcionalidad debe desarrollarse en rama separada**
- **Un commit por cambio para facilitar rollbacks**
- **Aprobaci√≥n del usuario antes de merge a main**

---

## **üîí ESTRUCTURA DE RAMAS**

### **Ramas Principales:**

- **`main`**: C√≥digo de producci√≥n estable y desplegado
- **`develop`**: Rama de desarrollo principal donde se integran features
- **`feature/nombre-funcionalidad`**: Ramas para nuevas funcionalidades
- **`hotfix/nombre-fix`**: Ramas para correcciones urgentes en producci√≥n

### **Convenci√≥n de Nombres:**

```bash
# Para nuevas funcionalidades
feature/agregar-favoritos
feature/comentarios-watchlist
feature/busqueda-filtros

# Para correcciones urgentes
hotfix/fix-email-watchlist
hotfix/fix-autenticacion
```

---

## **üõ°Ô∏è PROCESO DE DESARROLLO**

### **1. Crear Rama Feature:**

```bash
# Cambiar a develop
git checkout develop
git pull origin develop

# Crear nueva rama feature
git checkout -b feature/nombre-funcionalidad
```

### **2. Desarrollo con Commits Frecuentes:**

```bash
# Un commit por cada cambio significativo
git add archivo-modificado.tsx
git commit -m "feat: agregar bot√≥n de favoritos en MediaCard"

git add otro-archivo.tsx
git commit -m "style: mejorar estilos del bot√≥n de favoritos"

git add test-favoritos.test.tsx
git commit -m "test: agregar tests para funcionalidad de favoritos"
```

### **3. Testing y Validaci√≥n:**

- **Probar funcionalidad** en entorno local
- **Verificar que no se rompa funcionalidad existente**
- **Revisar que usuarios actuales mantengan acceso**
- **Validar que nuevas funcionalidades trabajen correctamente**

### **4. Merge a Develop:**

```bash
# Cambiar a develop
git checkout develop
git pull origin develop

# Merge de la feature
git merge feature/nombre-funcionalidad

# Push a develop
git push origin develop
```

### **5. Aprobaci√≥n para Main:**

- **Usuario debe aprobar** antes de merge a main
- **Solo despu√©s de testing completo**
- **Verificar que no afecte usuarios actuales**

---

## **üìã REGLAS DE COMMITS**

### **‚úÖ PRINCIPIOS SEGUROS:**

- **Un commit por cambio**: Cada modificaci√≥n debe ser un commit separado
- **Mensajes descriptivos**: Explicar claramente qu√© hace el commit
- **Commits at√≥micos**: Cada commit debe ser funcional por s√≠ solo
- **No commits masivos**: Evitar commits con m√∫ltiples cambios no relacionados

### **‚ùå PRINCIPIOS PELIGROSOS:**

- **Commits masivos**: M√∫ltiples cambios no relacionados en un solo commit
- **Mensajes vagos**: "fix bug" o "update code"
- **Commits sin testing**: Subir c√≥digo sin probar
- **Merge sin aprobaci√≥n**: Hacer merge a main sin confirmaci√≥n del usuario

### **Formato de Mensajes:**

```bash
# Estructura: tipo: descripci√≥n breve

# Tipos disponibles:
feat: nueva funcionalidad
fix: correcci√≥n de bug
style: cambios de estilo/UI
refactor: refactorizaci√≥n de c√≥digo
test: agregar o modificar tests
docs: documentaci√≥n
chore: tareas de mantenimiento

# Ejemplos:
feat: agregar bot√≥n de favoritos en MediaCard
fix: corregir error de autenticaci√≥n en login
style: mejorar dise√±o del bot√≥n de favoritos
test: agregar tests para funcionalidad de favoritos
```

---

## **üö® ALERTAS CR√çTICAS**

### **Si detectas estos patrones, DETENER inmediatamente:**

- Commits masivos sin explicaci√≥n clara
- Merge a main sin aprobaci√≥n del usuario
- Cambios que puedan afectar usuarios actuales sin testing
- Commits que rompan funcionalidad existente

### **Comandos de emergencia:**

- **Revertir commit**: `git revert <commit-hash>`
- **Rollback a commit anterior**: `git reset --hard <commit-hash>`
- **Cancelar merge**: `git merge --abort`
- **Volver a rama anterior**: `git checkout <rama-anterior>`

---

## **üí° MEJORES PR√ÅCTICAS**

### **Para desarrollo de features:**

1. **Siempre crear rama feature** para nueva funcionalidad
2. **Hacer commits frecuentes** durante el desarrollo
3. **Probar exhaustivamente** antes de merge
4. **Solicitar aprobaci√≥n** antes de merge a main
5. **Documentar cambios** importantes

### **Para correcciones urgentes:**

1. **Crear rama hotfix** desde main
2. **Implementar correcci√≥n** con commits descriptivos
3. **Testing inmediato** de la correcci√≥n
4. **Merge r√°pido** a main y develop
5. **Deploy inmediato** a producci√≥n

### **Para colaboraci√≥n:**

1. **Comunicar cambios** importantes al equipo
2. **Revisar c√≥digo** antes de merge
3. **Mantener develop estable** siempre
4. **Documentar decisiones** importantes
5. **Coordinar deploys** con el equipo

---

## **üîß HERRAMIENTAS DE VALIDACI√ìN**

### **Antes de cada commit:**

```bash
# Verificar que la aplicaci√≥n compile
npm run build

# Verificar que no haya errores de TypeScript
npm run type-check

# Verificar que no haya errores de linting
npm run lint

# Ejecutar tests
npm run test
```

### **Antes de merge a develop:**

```bash
# Verificar que la aplicaci√≥n funcione
npm run dev

# Probar funcionalidad nueva
# Verificar que no se rompa funcionalidad existente
# Validar que usuarios actuales mantengan acceso
```

### **Antes de merge a main:**

```bash
# Testing exhaustivo en develop
# Aprobaci√≥n del usuario
# Verificaci√≥n final de funcionalidad
# Preparar para deploy
```

---

**üéØ OBJETIVO: Mantener un flujo de desarrollo seguro y organizado que permita implementar nuevas funcionalidades sin comprometer la estabilidad de la aplicaci√≥n en producci√≥n.**
